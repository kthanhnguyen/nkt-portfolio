$color-main: #e31b6d;
$color-white: #ffffff;
$color-bla: #1d1d1d;

$breakpoints: (
  na: 0px,
  // For BS grid
    xs: 320px,
  // Smartphone
    sm: 600px,
  // Tablets
    md: 900px,
  // Tablets Landscape and small desktops
    lg: 1200px,
  // Desktops
    xl: 1800px,
  // Large Desktop
);

@mixin min($bp, $max: "null", $device: "screen") {
  @if $max == "null" {
    @media only #{$device} and (min-width: #{$bp}) {
      @content;
    }
  } @else {
    @media only #{$device} and (min-width: #{$bp}) and (max-width: #{$max}) {
      @content;
    }
  }
}

@function bp($bp) {
  @return map-get($breakpoints, $bp);
}
@function container($container-size, $true-val: false) {
  @return map-get($container-sizes, $container-size);
}

$container-sizes: (
  sm: map-get($breakpoints, sm) - 30px,
  md: map-get($breakpoints, md) - 40px,
  lg: map-get($breakpoints, lg) - 150px,
  xl: map-get($breakpoints, xl) - 200px,
);

@each $bp, $container-size in $container-sizes {
  .container-#{$bp} {
    margin: 0 auto;
    padding-right: 1rem;
    padding-left: 1rem;
    width: 100%;

    $i: index($container-sizes, $bp $container-size);

    @for $j from $i through length($container-sizes) {
      @include min(#{bp(nth(nth($container-sizes, $j), 1))}) {
        max-width: container(#{nth(nth($container-sizes, $j), 1)});
      }
    }
  }
}
@mixin mediaQuery($screen) {
  @if map-has-key($map: $breakpoints, $key: $screen) {
    $value: map-get(
      $map: $breakpoints,
      $key: $screen,
    );
    @media screen and (max-width: ($value)) {
      @content;
    }
  } @else {
    @warn "`#{$screen}` khong ton tai";
  }
}

@mixin mediaQueryMin($screen) {
  @if map-has-key($map: $breakpoints, $key: $screen) {
    $value: map-get(
      $map: $breakpoints,
      $key: $screen,
    );
    @media screen and (min-width: $value) {
      @content;
    }
  } @else {
    @warn "`#{$screen}` khong ton tai";
  }
}
